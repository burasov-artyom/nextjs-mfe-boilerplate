/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/feather-route-matcher@4.0.0";
exports.ids = ["vendor-chunks/feather-route-matcher@4.0.0"];
exports.modules = {

/***/ "../node_modules/.pnpm/feather-route-matcher@4.0.0/node_modules/feather-route-matcher/feather-route-matcher.js":
/*!*********************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/feather-route-matcher@4.0.0/node_modules/feather-route-matcher/feather-route-matcher.js ***!
  \*********************************************************************************************************************/
/***/ (function(module) {

eval("(function (global, factory) {\n   true ? module.exports = factory() :\n  0;\n}(this, (function () { 'use strict';\n\n  // regexes borrowed from backbone\n  var optionalParam = /\\((.*?)\\)/g;\n  var namedParam = /(\\(\\?)?:\\w+/g;\n  // eslint-disable-next-line no-useless-escape\n  var escapeRegExp = /[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g;\n  var splatParam = /\\*/g;\n\n  // Parses a URL pattern such as `/users/:id`\n  // and builds and returns a regex that can be used to\n  // match said pattern. Credit for these\n  // regexes belongs to Jeremy Ashkenas and the\n  // other maintainers of Backbone.js\n  //\n  // It has been modified for extraction of\n  // named parameters from the URL\n  var parsePattern = function (pattern) {\n    var names = [];\n    pattern = pattern\n      .replace(escapeRegExp, '\\\\$&')\n      .replace(optionalParam, '(?:$1)?')\n      .replace(namedParam, function (match, optional) {\n        names.push(match.slice(1));\n        return optional ? match : '([^/?]+)'\n      })\n      .replace(splatParam, function () {\n        names.push('path');\n        return '([^?]*?)'\n      });\n\n    return {\n      regExp: new RegExp('^' + pattern + '(?:\\\\?([\\\\s\\\\S]*))?$'),\n      namedParams: names\n    }\n  };\n\n  function index (routes) {\n    var keys = Object.keys(routes);\n    var routeCache = {};\n\n    // loop through each route we're\n    // and build the shell of our\n    // route cache.\n    for (var item in routes) {\n      routeCache[item] = {\n        value: routes[item]\n      };\n    }\n\n    // main result is a function that can be called\n    // with the url\n    return function (url) {\n      var params;\n      var route;\n\n      // start looking for matches\n      var matchFound = keys.some(function (key) {\n        var parsed;\n\n        // fetch the route pattern from the cache\n        // there will always be one\n        route = routeCache[key];\n\n        // if the route doesn't already have\n        // a regex we never generated one\n        // so we do that here lazily.\n        // Parse the pattern to generate the\n        // regex once, and store the result\n        // for next time.\n        if (!route.regExp) {\n          parsed = parsePattern(key);\n          route.regExp = parsed.regExp;\n          route.namedParams = parsed.namedParams;\n          route.pattern = key;\n        }\n\n        // run our cached regex\n        var result = route.regExp.exec(url);\n\n        // if null there was no match\n        // returning falsy here continues\n        // the `Array.prototype.some` loop\n        if (!result) {\n          return\n        }\n\n        // remove other cruft from result\n        result = result.slice(1, -1);\n\n        // reduce our match to an object of named parameters\n        // we've extracted from the url\n        params = result.reduce(function (obj, val, index) {\n          if (val) {\n            obj[route.namedParams[index]] = val;\n          }\n          return obj\n        }, {});\n\n        // stops the loop\n        return true\n      });\n\n      // no routes matched\n      if (!matchFound) {\n        return null\n      }\n\n      return {\n        value: route.value,\n        params: params,\n        url: url,\n        pattern: route.pattern\n      }\n    }\n  }\n\n  return index;\n\n})));\n//# sourceMappingURL=feather-route-matcher.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2ZlYXRoZXItcm91dGUtbWF0Y2hlckA0LjAuMC9ub2RlX21vZHVsZXMvZmVhdGhlci1yb3V0ZS1tYXRjaGVyL2ZlYXRoZXItcm91dGUtbWF0Y2hlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLEVBQUUsS0FBNEQ7QUFDOUQsRUFBRSxDQUMyRDtBQUM3RCxDQUFDLHNCQUFzQjs7QUFFdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsSUFBSTs7QUFFYjtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLENBQUM7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL2hvbWUtdjE0Ly4uL25vZGVfbW9kdWxlcy8ucG5wbS9mZWF0aGVyLXJvdXRlLW1hdGNoZXJANC4wLjAvbm9kZV9tb2R1bGVzL2ZlYXRoZXItcm91dGUtbWF0Y2hlci9mZWF0aGVyLXJvdXRlLW1hdGNoZXIuanM/OWZjZiJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gIChnbG9iYWwgPSBnbG9iYWwgfHwgc2VsZiwgZ2xvYmFsLmNyZWF0ZU1hdGNoZXIgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgLy8gcmVnZXhlcyBib3Jyb3dlZCBmcm9tIGJhY2tib25lXG4gIHZhciBvcHRpb25hbFBhcmFtID0gL1xcKCguKj8pXFwpL2c7XG4gIHZhciBuYW1lZFBhcmFtID0gLyhcXChcXD8pPzpcXHcrL2c7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWVzY2FwZVxuICB2YXIgZXNjYXBlUmVnRXhwID0gL1tcXC17fVxcW1xcXSs/LixcXFxcXFxeJHwjXFxzXS9nO1xuICB2YXIgc3BsYXRQYXJhbSA9IC9cXCovZztcblxuICAvLyBQYXJzZXMgYSBVUkwgcGF0dGVybiBzdWNoIGFzIGAvdXNlcnMvOmlkYFxuICAvLyBhbmQgYnVpbGRzIGFuZCByZXR1cm5zIGEgcmVnZXggdGhhdCBjYW4gYmUgdXNlZCB0b1xuICAvLyBtYXRjaCBzYWlkIHBhdHRlcm4uIENyZWRpdCBmb3IgdGhlc2VcbiAgLy8gcmVnZXhlcyBiZWxvbmdzIHRvIEplcmVteSBBc2hrZW5hcyBhbmQgdGhlXG4gIC8vIG90aGVyIG1haW50YWluZXJzIG9mIEJhY2tib25lLmpzXG4gIC8vXG4gIC8vIEl0IGhhcyBiZWVuIG1vZGlmaWVkIGZvciBleHRyYWN0aW9uIG9mXG4gIC8vIG5hbWVkIHBhcmFtZXRlcnMgZnJvbSB0aGUgVVJMXG4gIHZhciBwYXJzZVBhdHRlcm4gPSBmdW5jdGlvbiAocGF0dGVybikge1xuICAgIHZhciBuYW1lcyA9IFtdO1xuICAgIHBhdHRlcm4gPSBwYXR0ZXJuXG4gICAgICAucmVwbGFjZShlc2NhcGVSZWdFeHAsICdcXFxcJCYnKVxuICAgICAgLnJlcGxhY2Uob3B0aW9uYWxQYXJhbSwgJyg/OiQxKT8nKVxuICAgICAgLnJlcGxhY2UobmFtZWRQYXJhbSwgZnVuY3Rpb24gKG1hdGNoLCBvcHRpb25hbCkge1xuICAgICAgICBuYW1lcy5wdXNoKG1hdGNoLnNsaWNlKDEpKTtcbiAgICAgICAgcmV0dXJuIG9wdGlvbmFsID8gbWF0Y2ggOiAnKFteLz9dKyknXG4gICAgICB9KVxuICAgICAgLnJlcGxhY2Uoc3BsYXRQYXJhbSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBuYW1lcy5wdXNoKCdwYXRoJyk7XG4gICAgICAgIHJldHVybiAnKFteP10qPyknXG4gICAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICByZWdFeHA6IG5ldyBSZWdFeHAoJ14nICsgcGF0dGVybiArICcoPzpcXFxcPyhbXFxcXHNcXFxcU10qKSk/JCcpLFxuICAgICAgbmFtZWRQYXJhbXM6IG5hbWVzXG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGluZGV4IChyb3V0ZXMpIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHJvdXRlcyk7XG4gICAgdmFyIHJvdXRlQ2FjaGUgPSB7fTtcblxuICAgIC8vIGxvb3AgdGhyb3VnaCBlYWNoIHJvdXRlIHdlJ3JlXG4gICAgLy8gYW5kIGJ1aWxkIHRoZSBzaGVsbCBvZiBvdXJcbiAgICAvLyByb3V0ZSBjYWNoZS5cbiAgICBmb3IgKHZhciBpdGVtIGluIHJvdXRlcykge1xuICAgICAgcm91dGVDYWNoZVtpdGVtXSA9IHtcbiAgICAgICAgdmFsdWU6IHJvdXRlc1tpdGVtXVxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBtYWluIHJlc3VsdCBpcyBhIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIGNhbGxlZFxuICAgIC8vIHdpdGggdGhlIHVybFxuICAgIHJldHVybiBmdW5jdGlvbiAodXJsKSB7XG4gICAgICB2YXIgcGFyYW1zO1xuICAgICAgdmFyIHJvdXRlO1xuXG4gICAgICAvLyBzdGFydCBsb29raW5nIGZvciBtYXRjaGVzXG4gICAgICB2YXIgbWF0Y2hGb3VuZCA9IGtleXMuc29tZShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciBwYXJzZWQ7XG5cbiAgICAgICAgLy8gZmV0Y2ggdGhlIHJvdXRlIHBhdHRlcm4gZnJvbSB0aGUgY2FjaGVcbiAgICAgICAgLy8gdGhlcmUgd2lsbCBhbHdheXMgYmUgb25lXG4gICAgICAgIHJvdXRlID0gcm91dGVDYWNoZVtrZXldO1xuXG4gICAgICAgIC8vIGlmIHRoZSByb3V0ZSBkb2Vzbid0IGFscmVhZHkgaGF2ZVxuICAgICAgICAvLyBhIHJlZ2V4IHdlIG5ldmVyIGdlbmVyYXRlZCBvbmVcbiAgICAgICAgLy8gc28gd2UgZG8gdGhhdCBoZXJlIGxhemlseS5cbiAgICAgICAgLy8gUGFyc2UgdGhlIHBhdHRlcm4gdG8gZ2VuZXJhdGUgdGhlXG4gICAgICAgIC8vIHJlZ2V4IG9uY2UsIGFuZCBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICAgIC8vIGZvciBuZXh0IHRpbWUuXG4gICAgICAgIGlmICghcm91dGUucmVnRXhwKSB7XG4gICAgICAgICAgcGFyc2VkID0gcGFyc2VQYXR0ZXJuKGtleSk7XG4gICAgICAgICAgcm91dGUucmVnRXhwID0gcGFyc2VkLnJlZ0V4cDtcbiAgICAgICAgICByb3V0ZS5uYW1lZFBhcmFtcyA9IHBhcnNlZC5uYW1lZFBhcmFtcztcbiAgICAgICAgICByb3V0ZS5wYXR0ZXJuID0ga2V5O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcnVuIG91ciBjYWNoZWQgcmVnZXhcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJvdXRlLnJlZ0V4cC5leGVjKHVybCk7XG5cbiAgICAgICAgLy8gaWYgbnVsbCB0aGVyZSB3YXMgbm8gbWF0Y2hcbiAgICAgICAgLy8gcmV0dXJuaW5nIGZhbHN5IGhlcmUgY29udGludWVzXG4gICAgICAgIC8vIHRoZSBgQXJyYXkucHJvdG90eXBlLnNvbWVgIGxvb3BcbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlbW92ZSBvdGhlciBjcnVmdCBmcm9tIHJlc3VsdFxuICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMSwgLTEpO1xuXG4gICAgICAgIC8vIHJlZHVjZSBvdXIgbWF0Y2ggdG8gYW4gb2JqZWN0IG9mIG5hbWVkIHBhcmFtZXRlcnNcbiAgICAgICAgLy8gd2UndmUgZXh0cmFjdGVkIGZyb20gdGhlIHVybFxuICAgICAgICBwYXJhbXMgPSByZXN1bHQucmVkdWNlKGZ1bmN0aW9uIChvYmosIHZhbCwgaW5kZXgpIHtcbiAgICAgICAgICBpZiAodmFsKSB7XG4gICAgICAgICAgICBvYmpbcm91dGUubmFtZWRQYXJhbXNbaW5kZXhdXSA9IHZhbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG9ialxuICAgICAgICB9LCB7fSk7XG5cbiAgICAgICAgLy8gc3RvcHMgdGhlIGxvb3BcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0pO1xuXG4gICAgICAvLyBubyByb3V0ZXMgbWF0Y2hlZFxuICAgICAgaWYgKCFtYXRjaEZvdW5kKSB7XG4gICAgICAgIHJldHVybiBudWxsXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiByb3V0ZS52YWx1ZSxcbiAgICAgICAgcGFyYW1zOiBwYXJhbXMsXG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICBwYXR0ZXJuOiByb3V0ZS5wYXR0ZXJuXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGluZGV4O1xuXG59KSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmVhdGhlci1yb3V0ZS1tYXRjaGVyLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/.pnpm/feather-route-matcher@4.0.0/node_modules/feather-route-matcher/feather-route-matcher.js\n");

/***/ })

};
;